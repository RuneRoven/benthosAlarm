input:
  broker:
    inputs:
      - mqtt:
          urls: [tcp://192.168.3.22:1883]
          client_id: "alarm"
          connect_timeout: 30s
          topics: [test/new/prostetic_brain]
          auto_replay_nacks: true
      - generate:
          interval: '@every 1s'
          mapping: meta ping = true
pipeline:
  processors:
    - alarm:
        json: "eldorado.onion_soup"                 # json object for the alarm in case of json-data. e.x. 
                                                    # {"imaginary_value": 312, "not_a_number": "grashopper", "not_prime_number": 4}, 
                                                    # for multilevel json like {"value1": 123, "value2":133, "level2":{"value1:313}}
                                                    # use "level2.value1"
                                                    # the processor will extract the value from "not_prime_number" and compare with the alarm value
        value: 50.0                                 # Value for the alarm condition
        stringValue: ""                             # String to compare for trigger the alarm when using a specific string and not a float value
        operator: ">"                               # Operator for the alarm condition
        reset: 40.0                                 # Reset value for resetting the alarm trigger
        resetOperator: "<"                          # Operator for resetting the alarm trigger
        filterTime: "0s"                            # Time the condition needs to be true before sending the alarm 
        sendInterval: "0s"                            # Interval time for resending the alarm. for example "1h30m" will send the alarm every 1 and a half hour until reset 
        alarmText: "Oh, no. My kitchen exploded"    # Alarm text for the message
        alarmObject: "my_horse_is_broken"           # Name of the alarm object for the message e.x {"alarm": true, "msg": "alarmtext", "value": 123}
        addToJson: true                             # add the alarm to the json structure
        alarmJsonStruct: "eldorado.alarm"           # specific json output struct
        sendAlarmOnly: false                        # blocks all messages except the alarm message
        addValue: true                              # adds "value: 123" to the alarm text
        cleanMsg: true                              # discards the original message and creates a new json-message containing 
                                                    # {"send": true, "msg": "alarm text", "value": 123}
        addMeta: true
output:
  stdout: {}

  #mqtt:
  #  urls:
  #    - tcp://192.168.3.22:1883
  #  topic: 'test/new/as'
  #  client_id: 'benthos-alarm'
